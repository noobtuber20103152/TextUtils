{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","Dark","TextForm","useState","text","setText","FontSize","setSize","alert","setAlert","style","backgroundColor","rows","onChange","event","target","value","newText","toUpperCase","class","setTimeout","toLowerCase","document","getElementById","fontSize","console","log","copyText","navigator","clipboard","writeText","split","length","App","setmode","modeColor","setmodeColor","body","color","aboutText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.18729880.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.Dark} Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\n// Navbar.defaultProps = {\r\n//     title: 'Set title here',\r\n//     aboutText: 'About text here'\r\n// }\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpclick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        setAlert(<div class=\"alert alert-success\" role=\"alert\">\r\n            <strong>Suceess !</strong> Your Text has been uppercase.\r\n        </div>)\r\n        setTimeout(() => {\r\n            setAlert('');\r\n        }, 3000);\r\n    }\r\n    const handleDownclick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        setAlert(<div class=\"alert alert-success\" role=\"alert\">\r\n            <strong>Suceess !</strong> Your Text has been lowercase.\r\n        </div>)\r\n        setTimeout(() => {\r\n            setAlert('');\r\n        }, 3000);\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\")\r\n        setText(event.target.value);\r\n    }\r\n    const clearText = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        setAlert(<div class=\"alert alert-success\" role=\"alert\">\r\n            <strong>Suceess !</strong> Your Text has been cleared.\r\n        </div>);\r\n        setTimeout(() => {\r\n            setAlert('');\r\n        }, 3000);\r\n    }\r\n    const changeLanguage = () => {\r\n        let newText = document.getElementById(\"myBox\");\r\n        // newText.style.color = \"blue\";\r\n        // setText(newText);\r\n        if (newText.style.fontSize === \"30px\") {\r\n            newText.style.fontSize = \"20px\";\r\n            setSize('Change Font Size');\r\n            setAlert(<div class=\"alert alert-success\" role=\"alert\">\r\n                <strong>Suceess !</strong> Your Text has been resize.\r\n            </div>)\r\n            setTimeout(() => {\r\n                setAlert('');\r\n            }, 3000);\r\n        }\r\n        else {\r\n            newText.style.fontSize = \"30px\";\r\n            setSize(\"Revert Size\");\r\n            setAlert(<div class=\"alert alert-success\" role=\"alert\">\r\n                <strong>Suceess !</strong> Font size has been changed.\r\n            </div>)\r\n            setTimeout(() => {\r\n                setAlert('');\r\n            }, 3000);\r\n        }\r\n\r\n        console.log(\"Change size\");\r\n    }\r\n    const copyText = () => {\r\n        let copyText = text;\r\n        navigator.clipboard.writeText(copyText);\r\n        setAlert(<div class=\"alert alert-success\" role=\"alert\">\r\n            <strong>Suceess !</strong> Your Text has been copied.\r\n        </div>)\r\n        setTimeout(() => {\r\n            setAlert('');\r\n        }, 3000);\r\n    }\r\n    const [text, setText] = useState('');\r\n    const [FontSize, setSize] = useState('Change Font size')\r\n    // const [clear, setClear] = useState('Clear Text');\r\n    const [alert, setAlert] = useState('');\r\n    // const [color, setcolor] = useState(\"color: red\");\r\n    // text = \"Enter your text 2\" // Wrong way to change the state\r\n    // setText(\"New Text\");  //Correct way to change the state\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                {alert}\r\n            </div>\r\n            <div>\r\n                <div className=\"mb-3 container\">\r\n                    <h1>{props.title}</h1>\r\n                    <textarea style= {{backgroundColor:props.mode ==='dark'?'grey':'light'}} className=\"form-control\" id=\"myBox\" rows=\"8\" onChange={handleOnChange} value={text}></textarea>\r\n                    <button className=\"my-3 mx-2 btn btn-primary\" onClick={handleUpclick}>Convert to Uppercase</button>\r\n                    <button className=\"my-3 mx-2 btn btn-primary\" onClick={handleDownclick}>Convert to Lowercase</button>\r\n                    <button className=\"my-3 mx-2 btn btn-primary\" onClick={changeLanguage}>{FontSize}</button>\r\n                    <button className=\"my-3 mx-2 btn btn-primary\" onClick={clearText}>Clear Text</button>\r\n                    <button className=\"my-3 mx-2 btn btn-primary\" onClick={copyText}>Copy Clipboard</button>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <h1>Your Text summary</h1>\r\n                    <p>{text.split(' ').length} words and {text.length} character</p>\r\n                    <p>Time required to read this paragraph : {text.split(' ').length * 0.008} Minutes</p>\r\n                    <h3>Preview</h3>\r\n                    <p>{text.length>0?text:\"Enter your text to preview\"}</p>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\n// import { render } from \"react-dom\";\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [modeColor, setmodeColor] = useState('Dark');\n  // const [color, setcolor] = useState('dark')\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark')\n      setmodeColor('Light')\n      document.body.style.backgroundColor = \"#212529\";\n      document.body.style.color = \"white\";\n      document.title = \"Textutils - Dark Mode\";\n      // setcolor('light')\n    }\n    else {\n      setmode('light')\n      setmodeColor('Dark')\n      document.body.style.backgroundColor = \"#f8f9fa\";\n      document.body.style.color = \"black\";\n      document.title = \"Textutils - Light Mode\";\n      // setcolor('dark')\n    }\n  }\n  return (\n    <>\n      {/* <Navbar title = \"Textutilus\" aboutText=\"About Me\"/> */}\n      {/* \n      <Navbar toggleMode={toggleMode} title=\"Textutilus\" mode={mode} Dark={modeColor} aboutText=\"About Us\" />\n      <About />\n      <TextForm title=\"Enter the text to analyze\" /> */}\n      <Navbar toggleMode={toggleMode} title=\"Textutilus\" mode={mode} Dark={modeColor} aboutText=\"About Us\" />\n      <TextForm title=\"Enter the text to analyze\" /> \n      {/* <BrowserRouter>\n        <Routes>\n          <Route exact path=\"/\" element={<TextForm title=\"Enter your text to analuze\" />}></Route>\n          <Route exact path=\"/about\" element={<About />}></Route>\n        </Routes>\n      </BrowserRouter> */}\n    </>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}